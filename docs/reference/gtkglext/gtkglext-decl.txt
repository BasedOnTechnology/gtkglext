<FUNCTION>
<NAME>gdk_x11_gl_query_glx_extension</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLConfig  *glconfig,const char   *extension
</FUNCTION>
<FUNCTION>
<NAME>gdk_x11_gl_config_get_xdisplay</NAME>
<RETURNS>Display      *</RETURNS>
GdkGLConfig  *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_x11_gl_config_get_screen_number</NAME>
<RETURNS>int  </RETURNS>
GdkGLConfig  *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_x11_gl_config_get_xvinfo</NAME>
<RETURNS>XVisualInfo  *</RETURNS>
GdkGLConfig  *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_x11_gl_context_get_glxcontext</NAME>
<RETURNS>GLXContext  </RETURNS>
GdkGLContext *glcontext
</FUNCTION>
<FUNCTION>
<NAME>gdk_x11_gl_pixmap_get_glxpixmap</NAME>
<RETURNS>GLXPixmap  </RETURNS>
GdkGLPixmap  *glpixmap
</FUNCTION>
<FUNCTION>
<NAME>gdk_x11_gl_window_get_glxwindow</NAME>
<RETURNS>Window  </RETURNS>
GdkGLWindow  *glwindow
</FUNCTION>
<MACRO>
<NAME>GDK_GL_CONFIG_XDISPLAY</NAME>
#define GDK_GL_CONFIG_XDISPLAY(glconfig)       (GDK_GL_CONFIG_IMPL_X11 (glconfig)->xdisplay)
</MACRO>
<MACRO>
<NAME>GDK_GL_CONFIG_SCREEN_XNUMBER</NAME>
#define GDK_GL_CONFIG_SCREEN_XNUMBER(glconfig) (GDK_GL_CONFIG_IMPL_X11 (glconfig)->screen_num)
</MACRO>
<MACRO>
<NAME>GDK_GL_CONFIG_XVINFO</NAME>
#define GDK_GL_CONFIG_XVINFO(glconfig)         (GDK_GL_CONFIG_IMPL_X11 (glconfig)->xvinfo)
</MACRO>
<MACRO>
<NAME>GDK_GL_CONTEXT_GLXCONTEXT</NAME>
#define GDK_GL_CONTEXT_GLXCONTEXT(glcontext)   (GDK_GL_CONTEXT_IMPL_X11 (glcontext)->glxcontext)
</MACRO>
<MACRO>
<NAME>GDK_GL_PIXMAP_GLXPIXMAP</NAME>
#define GDK_GL_PIXMAP_GLXPIXMAP(glpixmap)      (GDK_GL_PIXMAP_IMPL_X11 (glpixmap)->glxpixmap)
</MACRO>
<MACRO>
<NAME>GDK_GL_WINDOW_GLXWINDOW</NAME>
#define GDK_GL_WINDOW_GLXWINDOW(glwindow)      (GDK_GL_WINDOW_IMPL_X11 (glwindow)->glxwindow)
</MACRO>
<MACRO>
<NAME>GDK_GL_CONFIG_XDISPLAY</NAME>
#define GDK_GL_CONFIG_XDISPLAY(glconfig)       (gdk_x11_gl_config_get_xdisplay (glconfig))
</MACRO>
<MACRO>
<NAME>GDK_GL_CONFIG_SCREEN_XNUMBER</NAME>
#define GDK_GL_CONFIG_SCREEN_XNUMBER(glconfig) (gdk_x11_gl_config_get_screen_number (glconfig))
</MACRO>
<MACRO>
<NAME>GDK_GL_CONFIG_XVINFO</NAME>
#define GDK_GL_CONFIG_XVINFO(glconfig)         (gdk_x11_gl_config_get_xvinfo (glconfig))
</MACRO>
<MACRO>
<NAME>GDK_GL_CONTEXT_GLXCONTEXT</NAME>
#define GDK_GL_CONTEXT_GLXCONTEXT(glcontext)   (gdk_x11_gl_context_get_glxcontext (glcontext))
</MACRO>
<MACRO>
<NAME>GDK_GL_PIXMAP_GLXPIXMAP</NAME>
#define GDK_GL_PIXMAP_GLXPIXMAP(glpixmap)      (gdk_x11_gl_pixmap_get_glxpixmap (glpixmap))
</MACRO>
<MACRO>
<NAME>GDK_GL_WINDOW_GLXWINDOW</NAME>
#define GDK_GL_WINDOW_GLXWINDOW(glwindow)      (gdk_x11_gl_window_get_glxwindow (glwindow))
</MACRO>
<MACRO>
<NAME>GDK_GL_CONFIG_XCOLORMAP</NAME>
#define GDK_GL_CONFIG_XCOLORMAP(glconfig)    (GDK_COLORMAP_XCOLORMAP ((glconfig)->colormap))
</MACRO>
<ENUM>
<NAME>GdkGLConfigMode</NAME>
typedef enum
{
  GDK_GL_MODE_RGB         = 1 << 1,
  GDK_GL_MODE_RGBA        = 1 << 1,   /* same as RGB */
  GDK_GL_MODE_INDEX       = 1 << 2,
  GDK_GL_MODE_SINGLE      = 1 << 3,
  GDK_GL_MODE_DOUBLE      = 1 << 4,
  GDK_GL_MODE_ACCUM       = 1 << 5,
  GDK_GL_MODE_ALPHA       = 1 << 6,
  GDK_GL_MODE_DEPTH       = 1 << 7,
  GDK_GL_MODE_STENCIL     = 1 << 8,
  GDK_GL_MODE_STEREO      = 1 << 9,
  GDK_GL_MODE_MULTISAMPLE = 1 << 10,  /* not supported yet */
  GDK_GL_MODE_LUMINANCE   = 1 << 11   /* not supported yet */
} GdkGLConfigMode;
</ENUM>
<STRUCT>
<NAME>GdkGLConfigClass</NAME>
</STRUCT>
<MACRO>
<NAME>GDK_TYPE_GL_CONFIG</NAME>
#define GDK_TYPE_GL_CONFIG              (gdk_gl_config_get_type ())
</MACRO>
<MACRO>
<NAME>GDK_GL_CONFIG</NAME>
#define GDK_GL_CONFIG(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_GL_CONFIG, GdkGLConfig))
</MACRO>
<MACRO>
<NAME>GDK_GL_CONFIG_CLASS</NAME>
#define GDK_GL_CONFIG_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_GL_CONFIG, GdkGLConfigClass))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_CONFIG</NAME>
#define GDK_IS_GL_CONFIG(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_GL_CONFIG))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_CONFIG_CLASS</NAME>
#define GDK_IS_GL_CONFIG_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_GL_CONFIG))
</MACRO>
<MACRO>
<NAME>GDK_GL_CONFIG_GET_CLASS</NAME>
#define GDK_GL_CONFIG_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_GL_CONFIG, GdkGLConfigClass))
</MACRO>
<STRUCT>
<NAME>GdkGLConfig</NAME>
struct GdkGLConfig
{
  GObject parent_instance;

  GdkScreen *screen;

  GdkColormap *colormap;
  gint depth;

  gint layer_plane;

  guint is_rgba            : 1;
  guint is_double_buffered : 1;
  guint as_single_mode     : 1;
  guint is_stereo          : 1;
  guint has_alpha          : 1;
  guint has_depth_buffer   : 1;
  guint has_stencil_buffer : 1;
  guint has_accum_buffer   : 1;
  guint is_multisample     : 1;
  guint is_luminance       : 1;

};
</STRUCT>
<FUNCTION>
<NAME>gdk_gl_config_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_new</NAME>
<RETURNS>GdkGLConfig  *</RETURNS>
const int       *attrib_list
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_new_for_screen</NAME>
<RETURNS>GdkGLConfig  *</RETURNS>
GdkScreen       *screen,const int       *attrib_list
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_new_by_mode</NAME>
<RETURNS>GdkGLConfig  *</RETURNS>
GdkGLConfigMode  mode
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_new_by_mode_for_screen</NAME>
<RETURNS>GdkGLConfig  *</RETURNS>
GdkScreen       *screen,GdkGLConfigMode  mode
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_get_screen</NAME>
<RETURNS>GdkScreen    *</RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_get_attrib</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLConfig     *glconfig,int              attribute,int             *value
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_get_colormap</NAME>
<RETURNS>GdkColormap  *</RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_get_visual</NAME>
<RETURNS>GdkVisual    *</RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_get_depth</NAME>
<RETURNS>gint  </RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_is_rgba</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_is_double_buffered</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_is_stereo</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_has_alpha</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_has_depth_buffer</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_has_stencil_buffer</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_config_has_accum_buffer</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLConfig     *glconfig
</FUNCTION>
<STRUCT>
<NAME>GdkGLContextClass</NAME>
</STRUCT>
<MACRO>
<NAME>GDK_TYPE_GL_CONTEXT</NAME>
#define GDK_TYPE_GL_CONTEXT              (gdk_gl_context_get_type ())
</MACRO>
<MACRO>
<NAME>GDK_GL_CONTEXT</NAME>
#define GDK_GL_CONTEXT(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_GL_CONTEXT, GdkGLContext))
</MACRO>
<MACRO>
<NAME>GDK_GL_CONTEXT_CLASS</NAME>
#define GDK_GL_CONTEXT_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_GL_CONTEXT, GdkGLContextClass))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_CONTEXT</NAME>
#define GDK_IS_GL_CONTEXT(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_GL_CONTEXT))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_CONTEXT_CLASS</NAME>
#define GDK_IS_GL_CONTEXT_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_GL_CONTEXT))
</MACRO>
<MACRO>
<NAME>GDK_GL_CONTEXT_GET_CLASS</NAME>
#define GDK_GL_CONTEXT_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_GL_CONTEXT, GdkGLContextClass))
</MACRO>
<STRUCT>
<NAME>GdkGLContext</NAME>
struct GdkGLContext
{
  GObject parent_instance;

  GdkGLDrawable *gldrawable;
  GdkGLDrawable *gldrawable_read;

  GdkGLConfig *glconfig;

  GdkGLContext *share_list;

  gboolean is_direct;
  int render_type;
};
</STRUCT>
<FUNCTION>
<NAME>gdk_gl_context_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_context_new</NAME>
<RETURNS>GdkGLContext   *</RETURNS>
GdkGLDrawable *gldrawable,GdkGLConfig   *glconfig,GdkGLContext  *share_list,gboolean       direct,int            render_type
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_context_copy</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLContext  *dst_glcontext,GdkGLContext  *src_glcontext,unsigned long  mask
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_context_get_gl_drawable</NAME>
<RETURNS>GdkGLDrawable  *</RETURNS>
GdkGLContext  *glcontext
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_context_get_gl_config</NAME>
<RETURNS>GdkGLConfig    *</RETURNS>
GdkGLContext  *glcontext
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_context_get_share_list</NAME>
<RETURNS>GdkGLContext   *</RETURNS>
GdkGLContext  *glcontext
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_context_is_direct</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLContext  *glcontext
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_context_get_render_type</NAME>
<RETURNS>int  </RETURNS>
GdkGLContext  *glcontext
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_context_get_colormap</NAME>
<RETURNS>GdkColormap    *</RETURNS>
GdkGLContext  *glcontext
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_context_get_current</NAME>
<RETURNS>GdkGLContext   *</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_GL_VAR</NAME>
#    define GDK_GL_VAR __declspec(dllexport)
</MACRO>
<MACRO>
<NAME>GDK_GL_VAR</NAME>
#    define GDK_GL_VAR extern __declspec(dllimport)
</MACRO>
<MACRO>
<NAME>GDK_GL_VAR</NAME>
#  define GDK_GL_VAR extern
</MACRO>
<STRUCT>
<NAME>GdkGLDrawableClass</NAME>
</STRUCT>
<MACRO>
<NAME>GDK_TYPE_GL_DRAWABLE</NAME>
#define GDK_TYPE_GL_DRAWABLE		  (gdk_gl_drawable_get_type ())
</MACRO>
<MACRO>
<NAME>GDK_GL_DRAWABLE</NAME>
#define GDK_GL_DRAWABLE(inst)		  (G_TYPE_CHECK_INSTANCE_CAST ((inst), GDK_TYPE_GL_DRAWABLE, GdkGLDrawable))
</MACRO>
<MACRO>
<NAME>GDK_GL_DRAWABLE_CLASS</NAME>
#define GDK_GL_DRAWABLE_CLASS(vtable)	  (G_TYPE_CHECK_CLASS_CAST ((vtable), GDK_TYPE_GL_DRAWABLE, GdkGLDrawableClass))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_DRAWABLE</NAME>
#define GDK_IS_GL_DRAWABLE(inst)	  (G_TYPE_CHECK_INSTANCE_TYPE ((inst), GDK_TYPE_GL_DRAWABLE))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_DRAWABLE_CLASS</NAME>
#define GDK_IS_GL_DRAWABLE_CLASS(vtable)  (G_TYPE_CHECK_CLASS_TYPE ((vtable), GDK_TYPE_GL_DRAWABLE))
</MACRO>
<MACRO>
<NAME>GDK_GL_DRAWABLE_GET_CLASS</NAME>
#define GDK_GL_DRAWABLE_GET_CLASS(inst)	  (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GDK_TYPE_GL_DRAWABLE, GdkGLDrawableClass))
</MACRO>
<FUNCTION>
<NAME>gdk_gl_drawable_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_make_current</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLDrawable *gldrawable,GdkGLContext  *glcontext
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_is_double_buffered</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLDrawable *gldrawable
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_swap_buffers</NAME>
<RETURNS>void  </RETURNS>
GdkGLDrawable *gldrawable
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_wait_gl</NAME>
<RETURNS>void  </RETURNS>
GdkGLDrawable *gldrawable
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_wait_gdk</NAME>
<RETURNS>void  </RETURNS>
GdkGLDrawable *gldrawable
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_gl_begin</NAME>
<RETURNS>gboolean  </RETURNS>
GdkGLDrawable *gldrawable,GdkGLContext  *glcontext
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_gl_end</NAME>
<RETURNS>void  </RETURNS>
GdkGLDrawable *gldrawable
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_get_gl_config</NAME>
<RETURNS>GdkGLConfig    *</RETURNS>
GdkGLDrawable *gldrawable
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_get_size</NAME>
<RETURNS>void  </RETURNS>
GdkGLDrawable *gldrawable,gint          *width,gint          *height
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_drawable_get_current</NAME>
<RETURNS>GdkGLDrawable  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_font_use_pango_font</NAME>
<RETURNS>PangoFont  *</RETURNS>
const PangoFontDescription *font_desc,int                         first,int                         count,int                         list_base
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_font_use_pango_font_for_display</NAME>
<RETURNS>PangoFont  *</RETURNS>
GdkDisplay                 *display,const PangoFontDescription *font_desc,int                         first,int                         count,int                         list_base
</FUNCTION>
<STRUCT>
<NAME>GdkGLPixmapClass</NAME>
</STRUCT>
<MACRO>
<NAME>GDK_TYPE_GL_PIXMAP</NAME>
#define GDK_TYPE_GL_PIXMAP              (gdk_gl_pixmap_get_type ())
</MACRO>
<MACRO>
<NAME>GDK_GL_PIXMAP</NAME>
#define GDK_GL_PIXMAP(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_GL_PIXMAP, GdkGLPixmap))
</MACRO>
<MACRO>
<NAME>GDK_GL_PIXMAP_CLASS</NAME>
#define GDK_GL_PIXMAP_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_GL_PIXMAP, GdkGLPixmapClass))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_PIXMAP</NAME>
#define GDK_IS_GL_PIXMAP(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_GL_PIXMAP))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_PIXMAP_CLASS</NAME>
#define GDK_IS_GL_PIXMAP_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_GL_PIXMAP))
</MACRO>
<MACRO>
<NAME>GDK_GL_PIXMAP_GET_CLASS</NAME>
#define GDK_GL_PIXMAP_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_GL_PIXMAP, GdkGLPixmapClass))
</MACRO>
<STRUCT>
<NAME>GdkGLPixmap</NAME>
struct GdkGLPixmap
{
  GdkDrawable parent_instance;

  GdkGLConfig *glconfig;

  GdkDrawable *drawable;        /* Associated GdkPixmap */
};
</STRUCT>
<FUNCTION>
<NAME>gdk_gl_pixmap_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_pixmap_new</NAME>
<RETURNS>GdkGLPixmap  *</RETURNS>
GdkGLConfig *glconfig,GdkPixmap   *pixmap,const int   *attrib_list
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_pixmap_get_pixmap</NAME>
<RETURNS>GdkPixmap    *</RETURNS>
GdkGLPixmap *glpixmap
</FUNCTION>
<FUNCTION>
<NAME>gdk_pixmap_set_gl_capability</NAME>
<RETURNS>GdkGLPixmap  *</RETURNS>
GdkPixmap   *pixmap,GdkGLConfig *glconfig,const int   *attrib_list
</FUNCTION>
<FUNCTION>
<NAME>gdk_pixmap_unset_gl_capability</NAME>
<RETURNS>void  </RETURNS>
GdkPixmap   *pixmap
</FUNCTION>
<FUNCTION>
<NAME>gdk_pixmap_is_gl_capable</NAME>
<RETURNS>gboolean  </RETURNS>
GdkPixmap   *pixmap
</FUNCTION>
<FUNCTION>
<NAME>gdk_pixmap_get_gl_pixmap</NAME>
<RETURNS>GdkGLPixmap  *</RETURNS>
GdkPixmap   *pixmap
</FUNCTION>
<MACRO>
<NAME>gdk_pixmap_get_gl_drawable</NAME>
#define      gdk_pixmap_get_gl_drawable(pixmap)         \
  GDK_GL_DRAWABLE (gdk_pixmap_get_gl_pixmap (pixmap))
</MACRO>
<USER_FUNCTION>
<NAME>GdkGLProc</NAME>
<RETURNS>void </RETURNS>
void
</USER_FUNCTION>
<FUNCTION>
<NAME>gdk_gl_query_extension</NAME>
<RETURNS>gboolean  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_query_extension_for_display</NAME>
<RETURNS>gboolean  </RETURNS>
GdkDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_query_version</NAME>
<RETURNS>gboolean  </RETURNS>
int        *major,int        *minor
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_query_version_for_display</NAME>
<RETURNS>gboolean  </RETURNS>
GdkDisplay *display,int        *major,int        *minor
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_query_gl_extension</NAME>
<RETURNS>gboolean  </RETURNS>
const char *extension
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_query_get_proc_address</NAME>
<RETURNS>GdkGLProc  </RETURNS>
const char *proc_name
</FUNCTION>
<ENUM>
<NAME>GdkGLSuccess</NAME>
typedef enum
{
  GDK_GL_SUCCESS = 0  /* same as 'Success' of X11 */
} GdkGLSuccess;
</ENUM>
<ENUM>
<NAME>GdkGLAttribListNone</NAME>
typedef enum
{
  GDK_GL_ATTRIB_LIST_NONE = 0  /* same as 'None' of X11 */
} GdkGLAttribListNone;
</ENUM>
<ENUM>
<NAME>GdkGLVisualConfigAttribute</NAME>
typedef enum
{
  GDK_GL_USE_GL           = 1,  /* support GLX rendering */
  GDK_GL_BUFFER_SIZE      = 2,  /* depth of the color buffer */
  GDK_GL_LEVEL            = 3,  /* level in plane stacking */
  GDK_GL_RGBA             = 4,  /* true if RGBA mode */
  GDK_GL_DOUBLEBUFFER     = 5,  /* double buffering supported */
  GDK_GL_STEREO           = 6,  /* stereo buffering supported */
  GDK_GL_AUX_BUFFERS      = 7,  /* number of aux buffers */
  GDK_GL_RED_SIZE         = 8,  /* number of red component bits */
  GDK_GL_GREEN_SIZE       = 9,  /* number of green component bits */
  GDK_GL_BLUE_SIZE        = 10, /* number of blue component bits */
  GDK_GL_ALPHA_SIZE       = 11, /* number of alpha component bits */
  GDK_GL_DEPTH_SIZE       = 12, /* number of depth bits */
  GDK_GL_STENCIL_SIZE     = 13, /* number of stencil bits */
  GDK_GL_ACCUM_RED_SIZE   = 14, /* number of red accum bits */
  GDK_GL_ACCUM_GREEN_SIZE = 15, /* number of green accum bits */
  GDK_GL_ACCUM_BLUE_SIZE  = 16, /* number of blue accum bits */
  GDK_GL_ACCUM_ALPHA_SIZE = 17  /* number of alpha accum bits */
} GdkGLVisualConfigAttribute;
</ENUM>
<ENUM>
<NAME>GdkGLFbConfigAttribute</NAME>
typedef enum
{
  GDK_GL_X_VISUAL_TYPE           = 0x22,
  GDK_GL_CONFIG_CAVEAT           = 0x20, /* Like visual_info VISUAL_CAVEAT_EXT */
  GDK_GL_TRANSPARENT_TYPE        = 0x23,
  GDK_GL_TRANSPARENT_INDEX_VALUE = 0x24,
  GDK_GL_TRANSPARENT_RED_VALUE   = 0x25,
  GDK_GL_TRANSPARENT_GREEN_VALUE = 0x26,
  GDK_GL_TRANSPARENT_BLUE_VALUE  = 0x27,
  GDK_GL_TRANSPARENT_ALPHA_VALUE = 0x28,
  GDK_GL_DRAWABLE_TYPE           = 0x8010,
  GDK_GL_RENDER_TYPE             = 0x8011,
  GDK_GL_X_RENDERABLE            = 0x8012,
  GDK_GL_FBCONFIG_ID             = 0x8013,
  GDK_GL_MAX_PBUFFER_WIDTH       = 0x8016,
  GDK_GL_MAX_PBUFFER_HEIGHT      = 0x8017,
  GDK_GL_MAX_PBUFFER_PIXELS      = 0x8018,
  GDK_GL_VISUAL_ID               = 0x800B
} GdkGLFbConfigAttribute;
</ENUM>
<ENUM>
<NAME>GdkGLMultisampleConfigAttribute</NAME>
typedef enum
{
  GDK_GL_SAMPLE_BUFFERS = 100000,
  GDK_GL_SAMPLES        = 100001
} GdkGLMultisampleConfigAttribute;
</ENUM>
<ENUM>
<NAME>GdkGLConfigError</NAME>
typedef enum
{
  GDK_GL_BAD_SCREEN    = 1, /* screen # is bad */
  GDK_GL_BAD_ATTRIBUTE = 2, /* attribute to get is bad */
  GDK_GL_NO_EXTENSION  = 3, /* no glx extension on server */
  GDK_GL_BAD_VISUAL    = 4, /* visual # not known by GLX */
  GDK_GL_BAD_CONTEXT   = 5, /* returned only by import_context EXT? */
  GDK_GL_BAD_VALUE     = 6, /* returned only by glXSwapIntervalSGI? */
  GDK_GL_BAD_ENUM      = 7  /* unused? */
} GdkGLConfigError;
</ENUM>
<ENUM>
<NAME>GdkGLGenericValue</NAME>
typedef enum
{
  GDK_GL_DONT_CARE              = 0xFFFFFFFF,

  /* GLX_RENDER_TYPE bits */
  GDK_GL_RGBA_BIT               = 0x00000001,
  GDK_GL_COLOR_INDEX_BIT        = 0x00000002,

  /* GLX_DRAWABLE_TYPE bits */
  GDK_GL_WINDOW_BIT             = 0x00000001,
  GDK_GL_PIXMAP_BIT             = 0x00000002,
  GDK_GL_PBUFFER_BIT            = 0x00000004,

  /* GLX_CONFIG_CAVEAT attribute values */
  GDK_GL_NONE                   = 0x8000,
  GDK_GL_SLOW_CONFIG            = 0x8001,
  GDK_GL_NON_CONFORMANT_CONFIG  = 0x800D,

  /* GLX_X_VISUAL_TYPE attribute values */
  GDK_GL_TRUE_COLOR             = 0x8002,
  GDK_GL_DIRECT_COLOR           = 0x8003,
  GDK_GL_PSEUDO_COLOR           = 0x8004,
  GDK_GL_STATIC_COLOR           = 0x8005,
  GDK_GL_GRAY_SCALE             = 0x8006,
  GDK_GL_STATIC_GRAY            = 0x8007,

  /* GLX_TRANSPARENT_TYPE attribute values */
  /* GDK_GL_NONE                   = 0x8000, */
  GDK_GL_TRANSPARENT_RGB        = 0x8008,
  GDK_GL_TRANSPARENT_INDEX      = 0x8009,

  /* glXCreateGLXPbuffer attributes */
  GDK_GL_PRESERVED_CONTENTS     = 0x801B,
  GDK_GL_LARGEST_PBUFFER        = 0x801C,
  GDK_GL_PBUFFER_HEIGHT         = 0x8040, /* New for GLX 1.3 */
  GDK_GL_PBUFFER_WIDTH          = 0x8041, /* New for GLX 1.3 */

  /* glXQueryGLXPBuffer attributes */
  GDK_GL_WIDTH                  = 0x801D,
  GDK_GL_HEIGHT                 = 0x801E,
  GDK_GL_EVENT_MASK             = 0x801F,

  /* glXCreateNewContext render_type attribute values */
  GDK_GL_RGBA_TYPE              = 0x8014,
  GDK_GL_COLOR_INDEX_TYPE       = 0x8015,

  /* glXQueryContext attributes */
  /* GDK_GL_FBCONFIG_ID            = 0x8013, */
  /* GDK_GL_RENDER_TYPE            = 0x8011, */
  GDK_GL_SCREEN                 = 0x800C,

  /* glXSelectEvent event mask bits */
  GDK_GL_PBUFFER_CLOBBER_MASK   = 0x08000000,

  /* GLXPbufferClobberEvent event_type values */
  GDK_GL_DAMAGED                = 0x8020,
  GDK_GL_SAVED                  = 0x8021,

  /* GLXPbufferClobberEvent draw_type values */
  GDK_GL_WINDOW                 = 0x8022,
  GDK_GL_PBUFFER                = 0x8023,

  /* GLXPbufferClobberEvent buffer_mask bits */
  GDK_GL_FRONT_LEFT_BUFFER_BIT  = 0x00000001,
  GDK_GL_FRONT_RIGHT_BUFFER_BIT = 0x00000002,
  GDK_GL_BACK_LEFT_BUFFER_BIT   = 0x00000004,
  GDK_GL_BACK_RIGHT_BUFFER_BIT  = 0x00000008,
  GDK_GL_AUX_BUFFERS_BIT        = 0x00000010,
  GDK_GL_DEPTH_BUFFER_BIT       = 0x00000020,
  GDK_GL_STENCIL_BUFFER_BIT     = 0x00000040,
  GDK_GL_ACCUM_BUFFER_BIT       = 0x00000080
} GdkGLGenericValue;
</ENUM>
<ENUM>
<NAME>GdkGLExtensionValue</NAME>
typedef enum
{
  /* [ GLX_EXT_visual_info extension ] */

  GDK_GL_X_VISUAL_TYPE_EXT           = 0x22, /* visual_info extension type */
  GDK_GL_TRANSPARENT_TYPE_EXT        = 0x23, /* visual_info extension */
  GDK_GL_TRANSPARENT_INDEX_VALUE_EXT = 0x24, /* visual_info extension */
  GDK_GL_TRANSPARENT_RED_VALUE_EXT   = 0x25, /* visual_info extension */
  GDK_GL_TRANSPARENT_GREEN_VALUE_EXT = 0x26, /* visual_info extension */
  GDK_GL_TRANSPARENT_BLUE_VALUE_EXT  = 0x27, /* visual_info extension */
  GDK_GL_TRANSPARENT_ALPHA_VALUE_EXT = 0x28, /* visual_info extension */

  /* Property values for visual_type */
  GDK_GL_TRUE_COLOR_EXT              = 0x8002,
  GDK_GL_DIRECT_COLOR_EXT            = 0x8003,
  GDK_GL_PSEUDO_COLOR_EXT            = 0x8004,
  GDK_GL_STATIC_COLOR_EXT            = 0x8005,
  GDK_GL_GRAY_SCALE_EXT              = 0x8006,
  GDK_GL_STATIC_GRAY_EXT             = 0x8007,

  /* Property values for transparent pixel */
  GDK_GL_NONE_EXT                    = 0x8000,
  GDK_GL_TRANSPARENT_RGB_EXT         = 0x8008,
  GDK_GL_TRANSPARENT_INDEX_EXT       = 0x8009,

  /* [ GLX_EXT_visual_rating extension ] */

  /* Property values for visual_rating */
  GDK_GL_VISUAL_CAVEAT_EXT           = 0x20,   /* visual_rating extension type */
  GDK_GL_SLOW_VISUAL_EXT             = 0x8001,
  GDK_GL_NON_CONFORMANT_VISUAL_EXT   = 0x800D
} GdkGLExtensionValue;
</ENUM>
<ENUM>
<NAME>GdkGLClientStringAttribute</NAME>
typedef enum
{
  GDK_GL_VENDOR     = 0x1,
  GDK_GL_VERSION    = 0x2,
  GDK_GL_EXTENSIONS = 0x3
} GdkGLClientStringAttribute;
</ENUM>
<ENUM>
<NAME>GdkGLContextInfoExtensionAttribute</NAME>
typedef enum
{
  GDK_GL_SHARE_CONTEXT_EXT = 0x800A, /* id of share context */
  GDK_GL_VISUAL_ID_EXT     = 0x800B, /* id of context's visual */
  GDK_GL_SCREEN_EXT        = 0x800C  /* screen number */
} GdkGLContextInfoExtensionAttribute;
</ENUM>
<STRUCT>
<NAME>GdkGLConfig</NAME>
</STRUCT>
<STRUCT>
<NAME>GdkGLContext</NAME>
</STRUCT>
<STRUCT>
<NAME>GdkGLDrawable</NAME>
</STRUCT>
<STRUCT>
<NAME>GdkGLPixmap</NAME>
</STRUCT>
<STRUCT>
<NAME>GdkGLWindow</NAME>
</STRUCT>
<STRUCT>
<NAME>GdkGLWindowClass</NAME>
</STRUCT>
<MACRO>
<NAME>GDK_TYPE_GL_WINDOW</NAME>
#define GDK_TYPE_GL_WINDOW              (gdk_gl_window_get_type ())
</MACRO>
<MACRO>
<NAME>GDK_GL_WINDOW</NAME>
#define GDK_GL_WINDOW(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_GL_WINDOW, GdkGLWindow))
</MACRO>
<MACRO>
<NAME>GDK_GL_WINDOW_CLASS</NAME>
#define GDK_GL_WINDOW_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_GL_WINDOW, GdkGLWindowClass))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_WINDOW</NAME>
#define GDK_IS_GL_WINDOW(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_GL_WINDOW))
</MACRO>
<MACRO>
<NAME>GDK_IS_GL_WINDOW_CLASS</NAME>
#define GDK_IS_GL_WINDOW_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_GL_WINDOW))
</MACRO>
<MACRO>
<NAME>GDK_GL_WINDOW_GET_CLASS</NAME>
#define GDK_GL_WINDOW_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_GL_WINDOW, GdkGLWindowClass))
</MACRO>
<STRUCT>
<NAME>GdkGLWindow</NAME>
struct GdkGLWindow
{
  GdkDrawable parent_instance;

  GdkGLConfig *glconfig;

  GdkDrawable *drawable;        /* Associated GdkWindow */
};
</STRUCT>
<FUNCTION>
<NAME>gdk_gl_window_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_window_new</NAME>
<RETURNS>GdkGLWindow  *</RETURNS>
GdkGLConfig *glconfig,GdkWindow   *window,const int   *attrib_list
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_window_get_window</NAME>
<RETURNS>GdkWindow    *</RETURNS>
GdkGLWindow *glwindow
</FUNCTION>
<FUNCTION>
<NAME>gdk_window_set_gl_capability</NAME>
<RETURNS>GdkGLWindow  *</RETURNS>
GdkWindow   *window,GdkGLConfig *glconfig,const int   *attrib_list
</FUNCTION>
<FUNCTION>
<NAME>gdk_window_unset_gl_capability</NAME>
<RETURNS>void  </RETURNS>
GdkWindow   *window
</FUNCTION>
<FUNCTION>
<NAME>gdk_window_is_gl_capable</NAME>
<RETURNS>gboolean  </RETURNS>
GdkWindow   *window
</FUNCTION>
<FUNCTION>
<NAME>gdk_window_get_gl_window</NAME>
<RETURNS>GdkGLWindow  *</RETURNS>
GdkWindow   *window
</FUNCTION>
<MACRO>
<NAME>gdk_window_get_gl_drawable</NAME>
#define      gdk_window_get_gl_drawable(window)         \
  GDK_GL_DRAWABLE (gdk_window_get_gl_window (window))
</MACRO>
<FUNCTION>
<NAME>gdk_gl_parse_args</NAME>
<RETURNS>gboolean  </RETURNS>
gint    *argc,gchar ***argv
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_init_check</NAME>
<RETURNS>gboolean  </RETURNS>
gint    *argc,gchar ***argv
</FUNCTION>
<FUNCTION>
<NAME>gdk_gl_init</NAME>
<RETURNS>void  </RETURNS>
gint    *argc,gchar ***argv
</FUNCTION>
<MACRO>
<NAME>GDKGLEXT_MAJOR_VERSION</NAME>
#define GDKGLEXT_MAJOR_VERSION (0)
</MACRO>
<MACRO>
<NAME>GDKGLEXT_MINOR_VERSION</NAME>
#define GDKGLEXT_MINOR_VERSION (5)
</MACRO>
<MACRO>
<NAME>GDKGLEXT_MICRO_VERSION</NAME>
#define GDKGLEXT_MICRO_VERSION (1)
</MACRO>
<MACRO>
<NAME>GDKGLEXT_INTERFACE_AGE</NAME>
#define GDKGLEXT_INTERFACE_AGE (0)
</MACRO>
<MACRO>
<NAME>GDKGLEXT_BINARY_AGE</NAME>
#define GDKGLEXT_BINARY_AGE    (0)
</MACRO>
<MACRO>
<NAME>GDKGLEXT_CHECK_VERSION</NAME>
#define	GDKGLEXT_CHECK_VERSION(major, minor, micro)                          \
  (GDKGLEXT_MAJOR_VERSION > (major) ||                                       \
  (GDKGLEXT_MAJOR_VERSION == (major) && GDKGLEXT_MINOR_VERSION > (minor)) || \
  (GDKGLEXT_MAJOR_VERSION == (major) && GDKGLEXT_MINOR_VERSION == (minor) && \
   GDKGLEXT_MICRO_VERSION >= (micro)))
</MACRO>
<VARIABLE>
<NAME>gdkglext_major_version</NAME>
extern const guint gdkglext_major_version;
</VARIABLE>
<VARIABLE>
<NAME>gdkglext_minor_version</NAME>
extern const guint gdkglext_minor_version;
</VARIABLE>
<VARIABLE>
<NAME>gdkglext_micro_version</NAME>
extern const guint gdkglext_micro_version;
</VARIABLE>
<VARIABLE>
<NAME>gdkglext_interface_age</NAME>
extern const guint gdkglext_interface_age;
</VARIABLE>
<VARIABLE>
<NAME>gdkglext_binary_age</NAME>
extern const guint gdkglext_binary_age;
</VARIABLE>
<FUNCTION>
<NAME>gdk_gl_success_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_SUCCESS</NAME>
#define GDK_TYPE_GL_SUCCESS (gdk_gl_success_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_attrib_list_none_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_ATTRIB_LIST_NONE</NAME>
#define GDK_TYPE_GL_ATTRIB_LIST_NONE (gdk_gl_attrib_list_none_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_visual_config_attribute_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_VISUAL_CONFIG_ATTRIBUTE</NAME>
#define GDK_TYPE_GL_VISUAL_CONFIG_ATTRIBUTE (gdk_gl_visual_config_attribute_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_fb_config_attribute_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_FB_CONFIG_ATTRIBUTE</NAME>
#define GDK_TYPE_GL_FB_CONFIG_ATTRIBUTE (gdk_gl_fb_config_attribute_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_multisample_config_attribute_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_MULTISAMPLE_CONFIG_ATTRIBUTE</NAME>
#define GDK_TYPE_GL_MULTISAMPLE_CONFIG_ATTRIBUTE (gdk_gl_multisample_config_attribute_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_config_error_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_CONFIG_ERROR</NAME>
#define GDK_TYPE_GL_CONFIG_ERROR (gdk_gl_config_error_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_generic_value_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_GENERIC_VALUE</NAME>
#define GDK_TYPE_GL_GENERIC_VALUE (gdk_gl_generic_value_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_extension_value_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_EXTENSION_VALUE</NAME>
#define GDK_TYPE_GL_EXTENSION_VALUE (gdk_gl_extension_value_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_client_string_attribute_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_CLIENT_STRING_ATTRIBUTE</NAME>
#define GDK_TYPE_GL_CLIENT_STRING_ATTRIBUTE (gdk_gl_client_string_attribute_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_context_info_extension_attribute_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_CONTEXT_INFO_EXTENSION_ATTRIBUTE</NAME>
#define GDK_TYPE_GL_CONTEXT_INFO_EXTENSION_ATTRIBUTE (gdk_gl_context_info_extension_attribute_get_type())
</MACRO>
<FUNCTION>
<NAME>gdk_gl_config_mode_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GDK_TYPE_GL_CONFIG_MODE</NAME>
#define GDK_TYPE_GL_CONFIG_MODE (gdk_gl_config_mode_get_type())
</MACRO>
<FUNCTION>
<NAME>gtk_gl_parse_args</NAME>
<RETURNS>gboolean  </RETURNS>
gint    *argc,gchar ***argv
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_init_check</NAME>
<RETURNS>gboolean  </RETURNS>
gint    *argc,gchar ***argv
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_init</NAME>
<RETURNS>void  </RETURNS>
gint    *argc,gchar ***argv
</FUNCTION>
<MACRO>
<NAME>GTK_GL_VAR</NAME>
#    define GTK_GL_VAR __declspec(dllexport)
</MACRO>
<MACRO>
<NAME>GTK_GL_VAR</NAME>
#    define GTK_GL_VAR extern __declspec(dllimport)
</MACRO>
<MACRO>
<NAME>GTK_GL_VAR</NAME>
#  define GTK_GL_VAR extern
</MACRO>
<FUNCTION>
<NAME>gtk_widget_set_gl_capability</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget    *widget,GdkGLConfig  *glconfig,GdkGLContext *share_list,gboolean      direct,int           render_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_is_gl_capable</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_gl_config</NAME>
<RETURNS>GdkGLConfig   *</RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_gl_context</NAME>
<RETURNS>GdkGLContext  *</RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_gl_window</NAME>
<RETURNS>GdkGLWindow   *</RETURNS>
GtkWidget    *widget
</FUNCTION>
<MACRO>
<NAME>gtk_widget_get_gl_drawable</NAME>
#define       gtk_widget_get_gl_drawable(widget)        \
  GDK_GL_DRAWABLE (gtk_widget_get_gl_window (widget))
</MACRO>
<MACRO>
<NAME>GTKGLEXT_MAJOR_VERSION</NAME>
#define GTKGLEXT_MAJOR_VERSION (0)
</MACRO>
<MACRO>
<NAME>GTKGLEXT_MINOR_VERSION</NAME>
#define GTKGLEXT_MINOR_VERSION (5)
</MACRO>
<MACRO>
<NAME>GTKGLEXT_MICRO_VERSION</NAME>
#define GTKGLEXT_MICRO_VERSION (1)
</MACRO>
<MACRO>
<NAME>GTKGLEXT_INTERFACE_AGE</NAME>
#define GTKGLEXT_INTERFACE_AGE (0)
</MACRO>
<MACRO>
<NAME>GTKGLEXT_BINARY_AGE</NAME>
#define GTKGLEXT_BINARY_AGE    (0)
</MACRO>
<MACRO>
<NAME>GTKGLEXT_CHECK_VERSION</NAME>
#define	GTKGLEXT_CHECK_VERSION(major, minor, micro)                          \
  (GTKGLEXT_MAJOR_VERSION > (major) ||                                       \
  (GTKGLEXT_MAJOR_VERSION == (major) && GTKGLEXT_MINOR_VERSION > (minor)) || \
  (GTKGLEXT_MAJOR_VERSION == (major) && GTKGLEXT_MINOR_VERSION == (minor) && \
   GTKGLEXT_MICRO_VERSION >= (micro)))
</MACRO>
<VARIABLE>
<NAME>gtkglext_major_version</NAME>
extern const guint gtkglext_major_version;
</VARIABLE>
<VARIABLE>
<NAME>gtkglext_minor_version</NAME>
extern const guint gtkglext_minor_version;
</VARIABLE>
<VARIABLE>
<NAME>gtkglext_micro_version</NAME>
extern const guint gtkglext_micro_version;
</VARIABLE>
<VARIABLE>
<NAME>gtkglext_interface_age</NAME>
extern const guint gtkglext_interface_age;
</VARIABLE>
<VARIABLE>
<NAME>gtkglext_binary_age</NAME>
extern const guint gtkglext_binary_age;
</VARIABLE>
