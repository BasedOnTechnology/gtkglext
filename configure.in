# required autoconf version
AC_PREREQ(2.52)

# Process this file with autoconf to produce a configure script.
AC_INIT(gdk/gdkgl.h)

## Versions of dependencies

GLIB_PKG=glib-2.0
GLIB_REQUIRED_VERSION=2.0.0

GOBJECT_PKG=gobject-2.0
GOBJECT_REQUIRED_VERSION=2.0.0

GMODULE_PKG=gmodule-2.0
GMODULE_REQUIRED_VERSION=2.0.0

PANGO_PKG=pango
PANGO_REQUIRED_VERSION=1.0.0

GDK_PKG=gdk-2.0
GDK_REQUIRED_VERSION=2.0.0

GTK_PKG=gtk+-2.0
GTK_REQUIRED_VERSION=2.0.0

#
# Making releases:
#   GTKGLEXT_MICRO_VERSION += 1;
#   GTKGLEXT_INTERFACE_AGE += 1;
#   GTKGLEXT_BINARY_AGE += 1;
# if any functions have been added, set GTKGLEXT_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set GTKGLEXT_BINARY_AGE and GTKGLEXT_INTERFACE_AGE to 0.
#
GTKGLEXT_MAJOR_VERSION=0
GTKGLEXT_MINOR_VERSION=7
GTKGLEXT_MICRO_VERSION=1
GTKGLEXT_INTERFACE_AGE=1
GTKGLEXT_BINARY_AGE=1
GTKGLEXT_VERSION=$GTKGLEXT_MAJOR_VERSION.$GTKGLEXT_MINOR_VERSION.$GTKGLEXT_MICRO_VERSION
dnl This is the X.Y used in -lgtkglext-FOO-X.Y
GTKGLEXT_API_MAJOR_VERSION=1
GTKGLEXT_API_MINOR_VERSION=0
GTKGLEXT_API_VERSION=$GTKGLEXT_API_MAJOR_VERSION.$GTKGLEXT_API_MINOR_VERSION
API_MJ=$GTKGLEXT_API_MAJOR_VERSION
API_MI=$GTKGLEXT_API_MINOR_VERSION
AC_SUBST(GTKGLEXT_MAJOR_VERSION)
AC_SUBST(GTKGLEXT_MINOR_VERSION)
AC_SUBST(GTKGLEXT_MICRO_VERSION)
AC_SUBST(GTKGLEXT_INTERFACE_AGE)
AC_SUBST(GTKGLEXT_BINARY_AGE)
AC_SUBST(GTKGLEXT_VERSION)
AC_SUBST(GTKGLEXT_API_MAJOR_VERSION)
AC_SUBST(GTKGLEXT_API_MINOR_VERSION)
AC_SUBST(GTKGLEXT_API_VERSION)
AC_SUBST(API_MJ)
AC_SUBST(API_MI)

# libtool versioning
LT_RELEASE=$GTKGLEXT_MAJOR_VERSION.$GTKGLEXT_MINOR_VERSION
LT_CURRENT=`expr $GTKGLEXT_MICRO_VERSION - $GTKGLEXT_INTERFACE_AGE`
LT_REVISION=$GTKGLEXT_INTERFACE_AGE
LT_AGE=`expr $GTKGLEXT_BINARY_AGE - $GTKGLEXT_INTERFACE_AGE`
LT_CURRENT_MINUS_AGE=`expr $LT_CURRENT - $LT_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)
AC_SUBST(LT_CURRENT_MINUS_AGE)

# For automake.
VERSION=$GTKGLEXT_VERSION
PACKAGE=gtkglext

# Save this value here, since automake will set cflags later
cflags_set=${CFLAGS+set}

dnl Initialize automake stuff
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

# Specify a configuration file
AM_CONFIG_HEADER(config.h)

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

AC_CANONICAL_HOST

dnl Initialize libtool
AC_PROG_CC
AC_PROG_CPP
AC_ISC_POSIX
#AM_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL

platform_win32=no
AC_MSG_CHECKING([for some Win32 platform])
case "$host_os" in
  *mingw*|*cygwin*)
    platform_win32=yes
    ;;
  *)
    ;;
esac
AC_MSG_RESULT([$platform_win32])
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = "yes")

os_win32=no
MATH_LIB=-lm
AC_MSG_CHECKING([for native Win32])
case "$host_os" in
  *mingw*)
    os_win32=yes
    MATH_LIB=
    ;;
  *)
    ;;
esac
AC_MSG_RESULT([$os_win32])
AM_CONDITIONAL(OS_WIN32, test "$os_win32" = "yes")
AC_SUBST(MATH_LIB)

if test "$os_win32" = "yes"; then
  AC_CHECK_PROG(ms_librarian, lib.exe, yes, no)
fi
AM_CONDITIONAL(MS_LIB_AVAILABLE, test x$ms_librarian = xyes)

if test "$platform_win32" = yes; then
  gdktarget=win32
else
  gdktarget=x11
fi

AC_ARG_WITH(gdktarget,
[  --with-gdktarget=[[x11/win32]] select GDK target],
gdktarget=$with_gdktarget)

AC_SUBST(gdktarget)
case $gdktarget in
  x11|win32) ;;
  *) AC_MSG_ERROR([Invalid target for GDK: use x11 or win32.]);;
esac

gdkglext_targetlib=libgdkglext-$gdktarget-$GTKGLEXT_API_VERSION.la
gtkglext_targetlib=libgtkglext-$gdktarget-$GTKGLEXT_API_VERSION.la

AC_SUBST(gdkglext_targetlib)
AC_SUBST(gtkglext_targetlib)


# Build time sanity check...
AM_SANITY_CHECK

# Checks for programs.
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_LN_S
AC_PROG_AWK

# debug flag
AC_ARG_ENABLE(debug,
[  --enable-debug=[[no/minimum/yes]] turn on debugging [[default=minimum]]],
, enable_debug=minimum)

changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac

  if test "x$enable_ansi" = "xyes"; then
    case " $CFLAGS " in
    *[\ \	]-ansi[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -ansi" ;;
    esac

    case " $CFLAGS " in
    *[\ \	]-pedantic[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -pedantic" ;;
    esac
  fi
fi

if test "x$enable_debug" = "xyes"; then
  if test x$cflags_set != xset ; then
      case " $CFLAGS " in
      *[[\ \	]]-g[[\ \	]]*) ;;
      *) CFLAGS="$CFLAGS -g" ;;
      esac
  fi
  GTKGLEXT_DEBUG_FLAGS="-DG_ENABLE_DEBUG"
else
  if test "x$enable_debug" = "xno"; then
    GTKGLEXT_DEBUG_FLAGS="-DG_DISABLE_ASSERT -DG_DISABLE_CHECKS -DG_DISABLE_CAST_CHECKS"
  else
    GTKGLEXT_DEBUG_FLAGS="-DG_DISABLE_CAST_CHECKS"
  fi
fi
changequote([,])dnl

AC_SUBST(GTKGLEXT_DEBUG_FLAGS)

# Ensure MSVC-compatible struct packing convention is used when
# compiling for Win32 with gcc.
# What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
# gcc2 uses "-fnative-struct".
if test x"$os_win32" = xyes; then
  if test x"$GCC" = xyes; then
    msnative_struct=''
    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
    if test -z "$ac_cv_prog_CC"; then
      our_gcc="$CC"
    else
      our_gcc="$ac_cv_prog_CC"
    fi
    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
      2.)
	if $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then
	  msnative_struct='-fnative-struct'
	fi
	;;
      *)
	if $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then
	  msnative_struct='-mms-bitfields'
	fi
	;;
    esac
    if test x"$msnative_struct" = x ; then
      AC_MSG_RESULT([no way])
      AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])
    else
      CFLAGS="$CFLAGS $msnative_struct"
      AC_MSG_RESULT([${msnative_struct}])
    fi
  fi
fi

if test "$os_win32" != yes; then
    # libtool option to control which symbols are exported
    # right now, symbols starting with _ are not exported
    LIBTOOL_EXPORT_OPTIONS='-export-symbols-regex "^[[^_]].*"'
else
    # We currently use .def files on Windows
    LIBTOOL_EXPORT_OPTIONS=
fi
AC_SUBST(LIBTOOL_EXPORT_OPTIONS)

# define a MAINT-like variable REBUILD which is set if Perl
# and awk are found, so autogenerated sources can be rebuilt

AC_ARG_ENABLE(rebuilds,
[  --disable-rebuilds      disable all source autogeneration rules],
, enable_rebuilds=yes)

AC_PATH_PROGS(PERL, perl5 perl)

# We would like indent, but don't require it.
AC_CHECK_PROG(INDENT, indent, indent)

REBUILD=\#
if test "x$enable_rebuilds" = "xyes" && \
     test -n "$PERL" && \
     $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 ; then
  REBUILD=
fi
AC_SUBST(REBUILD)

# Honor aclocal flags
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

## Initial sanity check, done here so that users get told they 
## have the wrong dependencies as early in the process as possible.
## Later on we actually use the cflags/libs from separate pkg-config
## calls. Oh, also the later pkg-config calls don't include 
## the version requirements since those make the module lists 
## annoying to construct
PKG_CHECK_MODULES(BASE_DEPENDENCIES,
$GTK_PKG >= $GTK_REQUIRED_VERSION \
$GDK_PKG >= $GDK_REQUIRED_VERSION \
$PANGO_PKG >= $PANGO_REQUIRED_VERSION \
$GMODULE_PKG >= $GMODULE_REQUIRED_VERSION \
)

# Check for GLib
AM_PATH_GLIB_2_0([$GLIB_REQUIRED_VERSION], ,
                 [AC_MSG_ERROR([GLib 2.0 not found])])

# Check for GTK+
AM_PATH_GTK_2_0([$GTK_REQUIRED_VERSION], ,
                [AC_MSG_ERROR([GTK+ 2.0 not found])])

# Checks for libraries.

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([inttypes.h stdlib.h string.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

# Checks for library functions.
save_LIBS="$LIBS"
LIBS="$LIBS $MATH_LIB"

AC_FUNC_MALLOC
AC_CHECK_FUNCS([memset sqrt strchr strrchr strstr])

LIBS="$save_LIBS"


##################################################
# Checks for GDK multihead support
##################################################

GDKGLEXT_MULTIHEAD_SUPPORT=no

save_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $BASE_DEPENDENCIES_CFLAGS"
save_LIBS="$LIBS"
LIBS="$LIBS $BASE_DEPENDENCIES_LIBS"

AC_CHECK_HEADERS([gdk/gdkdisplay.h gdk/gdkscreen.h],
                 [GDKGLEXT_MULTIHEAD_SUPPORT=yes],
                 [GDKGLEXT_MULTIHEAD_SUPPORT=no])

if test "x$GDKGLEXT_MULTIHEAD_SUPPORT" = "xyes"; then
  AC_MSG_CHECKING([for gdk_display_get_default in GDK library])
  AC_TRY_LINK([#include <gdk/gdk.h>],
              [gdk_display_get_default();],
              [GDKGLEXT_MULTIHEAD_SUPPORT=yes],
              [GDKGLEXT_MULTIHEAD_SUPPORT=no])
  AC_MSG_RESULT([$GDKGLEXT_MULTIHEAD_SUPPORT])
fi

CPPFLAGS="$save_CPPFLAGS"
LIBS="$save_LIBS"

if test "x$GDKGLEXT_MULTIHEAD_SUPPORT" = "xyes"; then
  AC_MSG_NOTICE([GDK supports multihead])
else
  AC_MSG_NOTICE([GDK doesn't support multihead])
fi

AC_SUBST(GDKGLEXT_MULTIHEAD_SUPPORT)
AM_CONDITIONAL(MULTIHEAD_SUPPORT, test "x$GDKGLEXT_MULTIHEAD_SUPPORT" = "xyes")


##################################################
# Checks for GDK functions
##################################################

save_LIBS="$LIBS"
LIBS="$LIBS $BASE_DEPENDENCIES_LIBS"

if test "x$gdktarget" = "xx11"; then
  AC_CHECK_FUNCS([gdk_x11_colormap_foreign_new])
fi

LIBS="$save_LIBS"


##################################################
# Checks for Window System
##################################################

WINDOWING_CFLAGS=""
WINDOWING_LIBS=""

GDKGLEXT_WIN_CFLAGS=""
GDKGLEXT_WIN_LIBS=""

if test "x$gdktarget" = "xx11"; then
  AC_PATH_XTRA

  if test "x$no_x" = "xyes" ; then
    AC_MSG_ERROR([X development libraries not found])
  fi

  save_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  save_LIBS="$LIBS"
  LIBS="$LIBS $X_LIBS -lXext -lX11 $X_EXTRA_LIBS"

  AC_CHECK_HEADERS([X11/Xmu/StdCmap.h Xmu/StdCmap.h])

  XMU_LIBS=""
  AC_CHECK_LIB(Xmu, XmuLookupStandardColormap, , ,
               [-lXt $X_PRE_LIBS])
  if test "x$ac_cv_lib_Xmu_XmuLookupStandardColormap" = "xyes" ; then
    XMU_LIBS="-lXmu -lXt $X_PRE_LIBS"
  fi

  WINDOWING_CFLAGS="$X_CFLAGS"
  WINDOWING_LIBS="$X_LIBS $XMU_LIBS -lXext -lX11 $X_EXTRA_LIBS"

  GDKGLEXT_WIN_CFLAGS="$X_CFLAGS"
  GDKGLEXT_WIN_LIBS="$X_LIBS $XMU_LIBS"

  CPPFLAGS="$save_CPPFLAGS"
  LIBS="$save_LIBS"

  AM_CONDITIONAL(USE_X11, true)
else
  AM_CONDITIONAL(USE_X11, false)
fi

if test "x$gdktarget" = "xwin32"; then
  WINDOWING_LIBS="-lgdi32 -luser32 -lkernel32"
  GDKGLEXT_WIN_LIBS="-lgdi32 -luser32 -lkernel32"
  AM_CONDITIONAL(USE_WIN32, true)
else
  AM_CONDITIONAL(USE_WIN32, false)
fi

AC_SUBST(WINDOWING_CFLAGS)
AC_SUBST(WINDOWING_LIBS)

AC_SUBST(GDKGLEXT_WIN_CFLAGS)
AC_SUBST(GDKGLEXT_WIN_LIBS)


##################################################
# Checks for OpenGL
##################################################

GL_CFLAGS=""
GL_LDFLAGS=""
GL_LIBS=""

AC_ARG_WITH(gl-prefix,
[  --with-gl-prefix=DIR      OpenGL (Mesa) is installed in DIR [[default=auto]]],
, with_gl_prefix=auto)

AC_ARG_WITH(gl-includedir,
[  --with-gl-includedir=DIR  OpenGL (Mesa) headers are in DIR [[default=auto]]],
, with_gl_includedir=auto)

AC_ARG_WITH(gl-libdir,
[  --with-gl-libdir=DIR      OpenGL (Mesa) libraries are in DIR [[default=auto]]],
, with_gl_libdir=auto)

if test "x$with_gl_includedir" != "xauto"; then
  GL_CFLAGS="-I$with_gl_includedir"
elif test "x$with_gl_prefix" != "xauto"; then
  GL_CFLAGS="-I$with_gl_prefix/include"
fi

if test "x$with_gl_libdir" != "xauto"; then
  GL_LDFLAGS="-L$with_gl_libdir"
elif test "x$with_gl_prefix" != "xauto"; then
  GL_LDFLAGS="-L$with_gl_prefix/lib"
fi

save_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $GL_CFLAGS $WINDOWING_CFLAGS"
save_LIBS="$LIBS"
LIBS="$LIBS $GL_LDFLAGS $WINDOWING_LIBS $MATH_LIB"

if test "x$gdktarget" = "xx11"; then
  AC_CHECK_HEADERS([GL/glx.h], ,
                   [AC_MSG_ERROR([Cannot find GLX header])])
fi

AC_CHECK_HEADERS([GL/gl.h GL/glu.h], ,
                 [AC_MSG_ERROR([Cannot find OpenGL headers])])

if test "x$gdktarget" = "xx11"; then

  # for X11

  THREAD_LIB="-lpthread"
  STDCPP_LIB="-lstdc++"

  have_GL=no
  GL_LIB_NAME=GL

  # GLcore and GL (SGI)
  AC_CHECK_LIB(GLcore, glVertex3d,
               [GL_LIBS="-lGLcore"])
  if test "x$ac_cv_lib_GLcore_glVertex3d" = "xyes" ; then
    # if GLcore found, then also check for GL
    AC_CHECK_LIB(GL, glXCreateContext,
                 [GL_LIBS="-lGL $GL_LIBS"
                  have_GL=yes])
  fi

  # GL
  if test "x$have_GL" = "xno" ; then
    # if no GLcore and GL, check for GL
    AC_CHECK_LIB(GL, glVertex3d,
                 [GL_LIBS="-lGL"
                  have_GL=yes])
    if test "x$ac_cv_lib_GL_glVertex3d" = "xno" ; then
      # GL may need to be linked with the thread library explicitly
      AC_CHECK_LIB(GL, glVertex3f,
                   [GL_LIBS="-lGL $THREAD_LIB"
                    have_GL=yes], ,
                   [$THREAD_LIB])
      if test "x$ac_cv_lib_GL_glVertex3f" = "xno" ; then
        # GL may need to be linked with std C++ library explicitly
        AC_CHECK_LIB(GL, glVertex3i,
                     [GL_LIBS="-lGL $STDCPP_LIB"
                      have_GL=yes], ,
                     [$STDCPP_LIB])
        if test "x$ac_cv_lib_GL_glVertex3i" = "xno" ; then
          # GL may need to be linked with std C++ and thread libraries explicitly
          AC_CHECK_LIB(GL, glVertex3s,
                       [GL_LIBS="-lGL $STDCPP_LIB $THREAD_LIB"
                        have_GL=yes], ,
                       [$STDCPP_LIB $THREAD_LIB])
        fi
      fi
    fi
  fi

  # MesaGL
  if test "x$have_GL" = "xno" ; then
    # if no GL, check for MesaGL
    AC_CHECK_LIB(MesaGL, glVertex3d,
                 [GL_LIBS="-lMesaGL"
                  have_GL=yes
                  GL_LIB_NAME=MesaGL])
  fi

  if test "x$have_GL" = "xno" ; then
    # no GL found
    AC_MSG_ERROR([Cannot find GL library])
  fi

  # GLU

  have_GLU=no
  have_SGI_GLU=no

  AC_CHECK_LIB(GLU, gluSphere,
               [GL_LIBS="-lGLU $GL_LIBS"
                have_GLU=yes], ,
               [$GL_LIBS])
  if test "x$ac_cv_lib_GLU_gluSphere" = "xno" ; then
    # GLU may need to be linked with the thread library explicitly
    AC_CHECK_LIB(GLU, gluCylinder,
                 [GL_LIBS="-lGLU $GL_LIBS $THREAD_LIB"
                  have_GLU=yes], ,
                 [$GL_LIBS $THREAD_LIB])
    if test "x$ac_cv_lib_GLU_gluCylinder" = "xno" ; then
      # GLU may need to be linked with std C++ library explicitly
      AC_CHECK_LIB(GLU, gluDisk,
                   [GL_LIBS="-lGLU $GL_LIBS $STDCPP_LIB"
                    have_GLU=yes
                    have_SGI_GLU=yes], ,
                   [$GL_LIBS $STDCPP_LIB])
      if test "x$ac_cv_lib_GLU_gluDisk" = "xno" ; then
        # GLU may need to be linked with std C++ and thread libraries explicitly
        AC_CHECK_LIB(GLU, gluPartialDisk,
                     [GL_LIBS="-lGLU $GL_LIBS $STDCPP_LIB $THREAD_LIB"
                      have_GLU=yes
                      have_SGI_GLU=yes], ,
                     [$GL_LIBS $STDCPP_LIB $THREAD_LIB])
      fi
    fi
  fi

  if test "x$have_GLU" = "xno" ; then
    # if no GLU, check for MesaGLU
    AC_CHECK_LIB(MesaGLU, gluSphere,
                 [GL_LIBS="-lMesaGLU $GL_LIBS"
                  have_GLU=yes], ,
                 [$GL_LIBS])
  fi

  if test "x$have_GLU" = "xno" ; then
    # no GLU found
    AC_MSG_ERROR([Cannot find GLU library])
  fi

  # Checks for SGI's GLU library
  if test "x$have_SGI_GLU" = "xno" ; then
    # Try static linking
    save_LDFLAGS="$LDFLAGS"
    LDFLAGS="$LDFLAGS $lt_cv_prog_cc_static"

    AC_CHECK_LIB(GLU, gluBeginCurve,
                 [have_SGI_GLU=no], ,
                 [$GL_LIBS])
    if test "x$ac_cv_lib_GLU_gluBeginCurve" = "xno" ; then
      AC_CHECK_LIB(GLU, gluBeginPolygon,
                   [GL_LIBS="$GL_LIBS $STDCPP_LIB"
                    have_SGI_GLU=yes], ,
                   [$GL_LIBS $STDCPP_LIB])
    fi

    LDFLAGS="$save_LDFLAGS"
  fi

  AC_MSG_CHECKING([whether libGLU needs to be linked with the std C++ library])
  AC_MSG_RESULT([$have_SGI_GLU])

  # Checks for some types in gdk/GL/glxext.h

  # GLXFBConfigSGIX
  GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF=no
  AC_CHECK_TYPES(GLXFBConfigSGIX, , ,
                 [#include <GL/glx.h>])
  if test "x$ac_cv_type_GLXFBConfigSGIX" = "xno" ; then
    GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF=yes
  fi

  # GLXFBConfigIDSGIX
  GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF=no
  AC_CHECK_TYPES(GLXFBConfigIDSGIX, , ,
                 [#include <GL/glx.h>])
  if test "x$ac_cv_type_GLXFBConfigIDSGIX" = "xno" ; then
    GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF=yes
  fi

  # GLXPbufferSGIX
  GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF=no
  AC_CHECK_TYPES(GLXPbufferSGIX, , ,
                 [#include <GL/glx.h>])
  if test "x$ac_cv_type_GLXPbufferSGIX" = "xno" ; then
    GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF=yes
  fi

  # __GLXextFuncPtr
  GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF=no
  AC_CHECK_TYPES(__GLXextFuncPtr, , ,
                 [#include <GL/glx.h>])
  if test "x$ac_cv_type___GLXextFuncPtr" = "xno" ; then
    GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF=yes
  fi

else

  # for Win32

  AC_MSG_CHECKING([for glNewList in -lopengl32])
  have_opengl32=no
  LIBS="-lopengl32 $LIBS"
  AC_TRY_LINK([#include <windows.h>
               #include <GL/gl.h>], 
              [glVertex3d(0.0, 0.0, 0.0);], 
              [GL_LIBS="-lopengl32"
               have_opengl32=yes])
  AC_MSG_RESULT([$have_opengl32])
  if test "x$have_opengl32" = "xno" ; then
    AC_MSG_ERROR([Cannot find GL library])
  fi

  AC_MSG_CHECKING([for gluNewQuadric in -lglu32])
  have_glu32=no
  LIBS="-lglu32 $LIBS"
  AC_TRY_LINK([#include <windows.h>
               #include <GL/gl.h>
               #include <GL/glu.h>], 
              [gluNewQuadric();], 
              [GL_LIBS="-lglu32 $GL_LIBS"
               have_glu32=yes])
  AC_MSG_RESULT([$have_glu32])
  if test "x$have_glu32" = "xno" ; then
    AC_MSG_ERROR([Cannot find GLU library])
  fi

dnl   AC_CHECK_LIB(opengl32, glNewList,
dnl                GL_LIBS="-lopengl32",
dnl                AC_MSG_ERROR(Cannot find GL library))

dnl   AC_CHECK_LIB(glu32, gluNewQuadric,
dnl                GL_LIBS="-lglu32 $GL_LIBS",
dnl                AC_MSG_ERROR(Cannot find GLU library),
dnl                $GL_LIBS)

fi

dnl # if using mesa, check for xmesa.h
dnl if test "x$ac_cv_lib_MesaGL_glNewList" = "xyes" ; then
dnl   AC_CHECK_HEADERS([GL/xmesa.h])
dnl   AM_CONDITIONAL(ENABLE_XMESA_FX, \
dnl                  test "x$ac_cv_header_GL_xmesa_h" = "xyes")
dnl else
dnl   # force a failed check
dnl   AM_CONDITIONAL(ENABLE_XMESA_FX, test "no" = "yes")
dnl fi

GL_LIBS="$GL_LDFLAGS $GL_LIBS"

AC_SUBST(GL_CFLAGS)
AC_SUBST(GL_LIBS)

CPPFLAGS="$save_CPPFLAGS"
LIBS="$save_LIBS"


##################################################
# CFLAGS and LIBS
##################################################

GDKGLEXT_PACKAGES="$GDK_PKG $PANGO_PKG $GMODULE_PKG"
GDKGLEXT_EXTRA_CFLAGS="$GL_CFLAGS $GDKGLEXT_WIN_CFLAGS"
GDKGLEXT_EXTRA_LIBS="$GL_LIBS $GDKGLEXT_WIN_LIBS"
GDKGLEXT_DEP_CFLAGS="$GDKGLEXT_EXTRA_CFLAGS `$PKG_CONFIG --cflags $GDKGLEXT_PACKAGES`"
GDKGLEXT_DEP_LIBS="$GDKGLEXT_EXTRA_LIBS `$PKG_CONFIG --libs $GDKGLEXT_PACKAGES` $MATH_LIB"
AC_SUBST(GDKGLEXT_PACKAGES)
AC_SUBST(GDKGLEXT_EXTRA_CFLAGS)
AC_SUBST(GDKGLEXT_EXTRA_LIBS)
AC_SUBST(GDKGLEXT_DEP_CFLAGS)
AC_SUBST(GDKGLEXT_DEP_LIBS)

GTKGLEXT_PACKAGES="$GTK_PKG"
GTKGLEXT_EXTRA_CFLAGS=""
GTKGLEXT_EXTRA_LIBS=""
GTKGLEXT_DEP_CFLAGS="$GTKGLEXT_EXTRA_CFLAGS $GDKGLEXT_EXTRA_CFLAGS `$PKG_CONFIG --cflags $GDKGLEXT_PACKAGES $GTKGLEXT_PACKAGES`"
GTKGLEXT_DEP_LIBS="$GTKGLEXT_EXTRA_LIBS $GDKGLEXT_EXTRA_LIBS `$PKG_CONFIG --libs $GDKGLEXT_PACKAGES $GTKGLEXT_PACKAGES` $MATH_LIB"
AC_SUBST(GTKGLEXT_PACKAGES)
AC_SUBST(GTKGLEXT_EXTRA_CFLAGS)
AC_SUBST(GTKGLEXT_EXTRA_LIBS)
AC_SUBST(GTKGLEXT_DEP_CFLAGS)
AC_SUBST(GTKGLEXT_DEP_LIBS)


##################################################
# Checks for gtk-doc and docbook-tools
##################################################

AC_ARG_WITH(html-dir,
[  --with-html-dir=PATH    path to installed docs ])

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='${datadir}/gtk-doc/html'
else
  HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)

AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)

gtk_doc_min_version=0.10
if $GTKDOC ; then
    gtk_doc_version=`gtkdoc-mkdb --version`
    AC_MSG_CHECKING([gtk-doc version ($gtk_doc_version) >= $gtk_doc_min_version])

    IFS="${IFS= 	}"; gtk_save_IFS="$IFS"; IFS="."
    set $gtk_doc_version
    for min in $gtk_doc_min_version ; do
        cur=$1; shift
        if test -z $min ; then break; fi
        if test -z $cur ; then GTKDOC=false; break; fi
        if test $cur -gt $min ; then break ; fi
        if test $cur -lt $min ; then GTKDOC=false; break ; fi
    done
    IFS="$gtk_save_IFS"

    if $GTKDOC ; then
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
fi

AC_CHECK_PROG(DB2HTML, db2html, true, false)
AM_CONDITIONAL(HAVE_DOCBOOK, $DB2HTML)

dnl Make people enable the gtk-doc stuff explicitely.
AC_ARG_ENABLE(gtk-doc,
[  --enable-gtk-doc        use gtk-doc to build documentation [[default=no]]],
enable_gtk_doc="$enableval", enable_gtk_doc=auto)

if test x$enable_gtk_doc = xyes ; then
  if test x$GTKDOC != xtrue ; then
    enable_gtk_doc=no 
  fi
fi

dnl NOTE: We need to use a separate automake conditional for this
dnl       to make this work with the tarballs.
AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)

AC_PATH_PROG(SGML2HTML, sgml2html, no)
AM_CONDITIONAL(HAVE_SGML2HTML, test x$SGML2HTML != xno)


##################################################
# Output commands
##################################################

AC_OUTPUT_COMMANDS([

## Generate `gdk/gdkglext-config.h' in two cases
## 1. `config.status' is run either explicitly, or via configure.
##     Esp. not when it is run in `Makefile' to generate makefiles and
##     config.h
## 2. CONFIG_OTHER is set explicitly
##
## Case 1 is difficult.  We know that `automake' sets one of
## CONFIG_FILES or CONFIG_HEADERS to empty.  This heuristic works
## only when AM_CONFIG_HEADER is set, however.

if test -n "${CONFIG_FILES}" && test -n "${CONFIG_HEADERS}"; then
  # Both CONFIG_FILES and CONFIG_HEADERS are non-empty ==> Case 1
  CONFIG_OTHER=${CONFIG_OTHER:-gdk/gdkglext-config.h}
fi
case "$CONFIG_OTHER" in
*gdk/gdkglext-config.h*)
	echo creating gdk/gdkglext-config.h
	outfile=gdkglext-config.h-tmp
	cat > $outfile <<\_______EOF
/* gdkglext-config.h
 *
 * This is a generated file.  Please modify `configure.in'
 */

#ifndef GDKGLEXT_CONFIG_H
#define GDKGLEXT_CONFIG_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

_______EOF

	cat >>$outfile <<_______EOF
$gdkglext_windowing
$gdkglext_multihead_support
_______EOF

	cat >>$outfile <<_______EOF

#if !defined(GDKGLEXT_MULTIHEAD_SUPPORT) && defined(GDK_MULTIHEAD_SAFE)
#error "Installed GdkGLExt library doesn't have multihead support."
#endif

_______EOF

	cat >>$outfile <<_______EOF
$gdkglext_need_glxfbconfigsgix_typedef
$gdkglext_need_glxfbconfigidsgix_typedef
$gdkglext_need_glxpbuffersgix_typedef
$gdkglext_need_glxextfuncptr_typedef
_______EOF

	cat >>$outfile <<_______EOF

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* GDKGLEXT_CONFIG_H */
_______EOF


	if cmp -s $outfile gdk/gdkglext-config.h; then
	  echo gdk/gdkglext-config.h is unchanged
	  rm -f $outfile
	else
	  mv $outfile gdk/gdkglext-config.h
	fi ;;
esac

],[

if test "x$gdktarget" = "xx11" ; then
  gdkglext_windowing='
#define GDKGLEXT_WINDOWING_X11'
elif test "x$gdktarget" = "xwin32" ; then
  gdkglext_windowing='
#define GDKGLEXT_WINDOWING_WIN32'
fi

if test "x$GDKGLEXT_MULTIHEAD_SUPPORT" = "xyes"; then
  gdkglext_multihead_support='
#define GDKGLEXT_MULTIHEAD_SUPPORT'
fi

if test "x$GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF" = "xyes"; then
  gdkglext_need_glxfbconfigsgix_typedef='
#define GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF'
fi

if test "x$GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF" = "xyes"; then
  gdkglext_need_glxfbconfigidsgix_typedef='
#define GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF'
fi

if test "x$GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF" = "xyes"; then
  gdkglext_need_glxpbuffersgix_typedef='
#define GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF'
fi

if test "x$GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF" = "xyes"; then
  gdkglext_need_glxextfuncptr_typedef='
#define GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF'
fi

])


##################################################
# Output
##################################################

AC_OUTPUT([
Makefile
gdkglext.pc
gtkglext.pc
gdkglext-uninstalled.pc
gtkglext-uninstalled.pc
gtkglext.spec
gdk/Makefile
gdk/gdkglversion.h
gdk/GL/Makefile
gdk/x11/Makefile
gdk/win32/Makefile
gtk/Makefile
gtk/gtkglversion.h
examples/Makefile
docs/Makefile
docs/reference/Makefile
docs/reference/gtkglext/Makefile
docs/reference/gtkglext/version.xml
m4macros/Makefile
])


##################################################
# Print configuration
##################################################

echo "
configuration:
	OpenGL CFLAGS:		$GL_CFLAGS
	OpenGL LIBS:		$GL_LIBS
	multihead support:	$GDKGLEXT_MULTIHEAD_SUPPORT
	debug:			$enable_debug
"
